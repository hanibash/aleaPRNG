/*//////////////////////////////////////////
aleaPRNG 1.0
////////////////////////////////////////////
Copyright (c) 2017, William P. "Mac" McMeans
LICENSE: BSD 3-Clause License
https://github.com/macmcmeans/aleaPRNG
//////////////////////////////////////////*/
function aleaPRNG() {
    return function(n) {
        "use strict";
        function r(n) {
            var r = Mash();
            e = r(" "), o = r(" "), u = r(" "), a = 1;
            for (var t = 0; t < n.length; t++) (e -= r(n[t])) < 0 && (e += 1), (o -= r(n[t])) < 0 && (o += 1), 
            (u -= r(n[t])) < 0 && (u += 1);
            r = null;
        }
        function t(n) {
            return parseInt(n) === n;
        }
        var e, o, u, a, c, i = new Uint32Array(3), f = function() {
            var n = 2091639 * e + 2.3283064365386963e-10 * a;
            return e = o, o = u, u = n - (a = 0 | n);
        };
        return f.double = function() {
            return f() + 1.1102230246251565e-16 * (2097152 * f() | 0);
        }, f.int32 = function() {
            return 4294967296 * f();
        }, f.prng = function(n) {
            for (var r = 0; r < n; r++) f();
        }, f.range = function() {
            var n, r;
            return 1 === arguments.length ? (n = 0, r = arguments[0]) : (n = arguments[0], r = arguments[1]), 
            arguments[0] > arguments[1] && (n = arguments[1], r = arguments[0]), t(n) && t(r) ? Math.floor(f() * (r - n + 1)) + n : f() * (r - n) + n;
        }, f.restart = function() {
            r(c);
        }, f.seed = function() {
            r(Array.prototype.slice.call(arguments));
        }, 0 === n.length && (window.crypto.getRandomValues(i), n = [ i[0], i[1], i[2] ]), 
        c = n, r(n), f;
    }(Array.prototype.slice.call(arguments));
}

function Mash() {
    var n = 4022871197;
    return function(r) {
        for (var t = 0, e = (r = r.toString()).length; t < e; t++) {
            var o = .02519603282416938 * (n += r.charCodeAt(t));
            o -= n = o >>> 0, n = (o *= n) >>> 0, n += 4294967296 * (o -= n);
        }
        return 2.3283064365386963e-10 * (n >>> 0);
    };
};